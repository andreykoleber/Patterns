package com.upnest.strategy;

/***
        * 1. Выделяйте аспекты приложения, которые могут изменяться, и отделите
        * их от тех, которые всегда остаются постоянными.
        *
        * 2. Программирования на уровне интерфейсов на не реализации.
        *
        * Dog d = new Dog();
        * d.bark();    Это программирование на уровне реализации
        *
        * Animal animal = new Dog();
        * animal.makeSound() Программирование на уровне интерфейс супетрипа.
        *
        * или еще лучше объект присваивается на уровне выполнения.
        *
        * Animal animal = getAnimal();
        * animal.makeSound();
        *
        * 3.Отвадайте предпочтение композиции перед наследованием.
        * т.е. каждая утка содержит экземпляры FlyBehavior и QuackBehavior(),
        * которыми делегирует выполнении соотвествующих операций, такии связи называются
        * композицией.
        *
        *
        * -------------------------------------------------------------------------
        * Паттерн стратегия определяет семейство алгоритмов, инкапсулирует каждый
        * из них и обеспечивает их взаимозаменяемость. Он позволяет модифицировать
        * алгоритмы независимо от их использования на стороне клиента.
        * -------------------------------------------------------------------------
        *
        */





public class MiniDuckSimulator {
    /***
     * Вызов метода performQuack(), унаследенного классом MallardDuck;
     * метод делегирует выполнение операции по ссылке на quackBehavior (то есть
     * вызывает quack() через унаследованную переменную quackBehavior).
     *
     * Затем то же самое происходит с методом performFly(), также унасследованного
     * классом MallardDuck.
     * @param args
     */
    public static void main(String[] args) {
        Duck mallard = new MallardDuck();
        mallard.performQuack();
        mallard.performFly();


        //Способность утки-приманки к полету переключаться динамически!
        //если бы реализация находилась в иерархии Duck, такое было бы невозможно.
        Duck model = new ModelDuck();
        model.performFly();
        model.setFlyBehavior(new FlyRocketPowerd());
        model.performFly();
    }
}